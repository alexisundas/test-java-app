name: "Build Docker Image and Push to Docker Hub"

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger the pipeline on tags matching v1.0.0 format, e.g., v1.0.0, v2.1.3
  pull_request:
    branches: [ "**" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Extract the tag Version
      - name: Get Tag Version
        id: get_tag
        run: echo "TAG_VERSION=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV
      # Get Latest Tag 
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
              git fetch --tags
              LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
              echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'oracle'

      # Step 3: Make Maven Wrapper Executable
      - name: Make Maven Wrapper Executable
        run: chmod +x mvnw
      # Step 4: Build JAR
      - name: Build JAR
        run: ./mvnw package  # Ensure that your Maven wrapper script is executable

      # Step 5: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/websitecounter:${{ env.TAG_VERSION }} .
      # If Pull Request - Analyze Docker Image
      - name: Analyze for critical and high CVEs
        id: docker-scout-cves
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ secrets.DOCKER_USERNAME }}/websitecounter:${{ env.LATEST_TAG }}
          sarif-file: sarif.output.json
          summary: true
          github-token: ${{ secrets.TOKEN_HUB }}
      # Upload the Result on Github
      - name: Upload SARIF result
        id: upload-sarif
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: sarif.output.json

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 7: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/websitecounter:${{ env.TAG_VERSION }}
